head(tidy.df)
library(tidyr)
library(dplyr)
head(relig_income)
tidy.df <- gather(relig_income, "Income", "N_People", 2:ncol(relig_income))
head(tidy.df)
str(tidy.df)
str(relig_income)
relig_income
head(relig_income)
str(tidy.df)
head(tidy.df)
tidy.df$Income <- as.factor(tidy.df$Income)
tidy.df$religion <- as.factor(tidy.df$religion)
tidy.df$Income <- as.factor(tidy.df$Income)
str(tidy.df)
tidy.df %>% group_by(religion) %>% summarise(media_creyentes = mean(N_People)) %>% arrange(desc(media_creyentes))
tidy.df %>% group_by(religion) %>% summarise(media_creyentes = mean(N_People)) %>% arrange(., desc(media_creyentes))
tidy.df$media_creyentes <- round(tidy.df$N_People/length(tidy.df$N_People), 2)
tidy.df$media_creyentes <- round(tidy.df$N_People/length(tidy.df$N_People), 2)
tidy.df
# tidy.df$media_creyentes <- round(tidy.df$N_People/length(tidy.df$N_People), 2)
library(tidyr)
library(dplyr)
head(relig_income)
tidy.df <- gather(relig_income, "Income", "N_People", 2:ncol(relig_income))
head(tidy.df)
tidy.df$religion <- as.factor(tidy.df$religion)
tidy.df$Income <- as.factor(tidy.df$Income)
tidy.df %>% group_by(religion) %>% summarise(media_creyentes = mean(N_People)) %>% arrange(desc(media_creyentes))
# tidy.df$media_creyentes <- round(tidy.df$N_People/length(tidy.df$N_People), 2)
# tidy.df$media_creyentes <- round(tidy.df$N_People/length(tidy.df$N_People), 2)
tidy.df <- mutate(tidy.df, media_creyentes = round(N_People/length(N_People),2))
head(tidy.df)
?filter
new.relig <- filter(tidy.df, N_People > mean(N_People), Income != "Don't know/refused") %>% sample_frac(size=0.3)
new.relig
library(tidyr)
library(dplyr)
head(relig_income)
tidy.df <- gather(relig_income, "Income", "N_People", 2:ncol(relig_income))
head(tidy.df)
tidy.df$religion <- as.factor(tidy.df$religion)
tidy.df$Income <- as.factor(tidy.df$Income)
tidy.df %>% group_by(religion) %>% summarise(media_creyentes = mean(N_People)) %>% arrange(desc(media_creyentes))
# tidy.df$media_creyentes <- round(tidy.df$N_People/length(tidy.df$N_People), 2)
tidy.df <- mutate(tidy.df, media_creyentes = round(N_People/length(N_People),2))
head(tidy.df)
new.relig <- filter(tidy.df, N_People > mean(N_People), Income != "Don't know/refused") %>% sample_frac(size=0.3)
new.relig
new.relig %>% select(Income, religion) %>% group_by(Income) %>% summarise(Income_religiones=n()) %>% arrange(Income_religiones)
?n()
library(ggplot2)
library(plotly)
head(diamonds)
str(diamonds)
summary(diamonds)
# Hacer un gráfico de barras con la cantidad de diamantes que hay para cada valor de la variable cut.
plot(diamonds$cut,
main = "Corte del diamante",
xlab = "Tipo de diamante",
ylab = "Valores",
las = 1,
col = topo.colors(length(unique(diamonds$cut))))
# Realiza un histograma del precio que muestre la frecuencia acumulada de la variable cut.
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price, fill = cut))
# Realiza un diagrama boxplot sobre el precio en función de la variable cut, obtén un diagrama diferente por cada variable clarity.
ggplot(diamonds) +
geom_boxplot(mapping = aes(price, fill = cut)) + facet_wrap(~clarity)
# Realiza una gráfica múltiple de 4 visualizaciones, en donde para cada visualización se realice un diagrama de dispersión en el que se tomen los valores: x, y, z y carat contra depth.
par(mfcol=c(2,2))
# Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "depth",
main = "X ~ depth",
col = 'darkgreen')
# Fila 2, columna 1
plot(diamonds$y, diamonds$depth,
xlab = "Variable Y",
ylab = "depth",
main = "Y ~ depth",
col = 'darkred')
# Fila 1, columna 2
plot(diamonds$z, diamonds$depth,
xlab = "Variable Z",
ylab = "depth",
main = "Z ~ depth",
col = 'blue')
# Fila 2, columna 2
plot(diamonds$carat, diamonds$depth,
xlab = "Variable Quilates",
ylab = "depth",
main = "Quilates ~ depth",
col = 'purple')
# Realiza un diagrama de dispersión con recta de ajuste del price sobre carat.
ggplot(diamonds) +
geom_point(mapping = aes(price, carat)) + geom_smooth(aes(price, carat), method = lm)
# Toma una muestra de 100 observaiones y, realiza un diagrama de barras de la variable cut contra price, en función de clarity.
library(dplyr)
fig.bar <- plot_ly (
data = sample_n(diamonds, 100),
x = ~cut,
y = ~price,
type = "bar",
color = ~clarity
)
fig.bar
# Realiza un diagram de sectores de la variable cut con los valores de carat.
fig <- plot_ly(
data = diamonds,
labels = ~cut,
values = ~carat,
type = 'pie'
)
fig
library(ggplot2)
library(plotly)
head(diamonds)
str(diamonds)
summary(diamonds)
# Hacer un gráfico de barras con la cantidad de diamantes que hay para cada valor de la variable cut.
plot(diamonds$cut,
main = "Corte del diamante",
xlab = "Tipo de diamante",
ylab = "Valores",
las = 1,
col = topo.colors(length(unique(diamonds$cut))))
# Realiza un histograma del precio que muestre la frecuencia acumulada de la variable cut.
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price, fill = cut))
# Realiza un diagrama boxplot sobre el precio en función de la variable cut, obtén un diagrama diferente por cada variable clarity.
ggplot(diamonds) +
geom_boxplot(mapping = aes(price, fill = cut)) + facet_wrap(~clarity)
# Realiza una gráfica múltiple de 4 visualizaciones, en donde para cada visualización se realice un diagrama de dispersión en el que se tomen los valores: x, y, z y carat contra depth.
par(mfcol=c(2,2))
# Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "depth",
main = "X ~ depth",
col = 'darkgreen')
# Fila 2, columna 1
plot(diamonds$y, diamonds$depth,
xlab = "Variable Y",
ylab = "depth",
main = "Y ~ depth",
col = 'darkred')
# Fila 1, columna 2
plot(diamonds$z, diamonds$depth,
xlab = "Variable Z",
ylab = "depth",
main = "Z ~ depth",
col = 'blue')
# Fila 2, columna 2
plot(diamonds$carat, diamonds$depth,
xlab = "Variable Quilates",
ylab = "depth",
main = "Quilates ~ depth",
col = 'purple')
# Realiza un diagrama de dispersión con recta de ajuste del price sobre carat.
ggplot(diamonds) +
geom_point(mapping = aes(price, carat)) + geom_smooth(aes(price, carat), method = lm)
# Toma una muestra de 100 observaiones y, realiza un diagrama de barras de la variable cut contra price, en función de clarity.
library(dplyr)
fig.bar <- plot_ly (
data = sample_n(diamonds, 100),
x = ~cut,
y = ~price,
type = "bar",
color = ~clarity
)
fig.bar
# Realiza un diagram de sectores de la variable cut con los valores de carat.
fig <- plot_ly(
data = diamonds,
labels = ~cut,
values = ~carat,
type = 'pie'
)
fig
library(plotly)
library(ggplot2)
library(plotly)
diamonds
head(diamonds)
str(diamonds)
summary(diamonds)
plot(cut)
fact.cut <- as.factor(diamonds$cut)
plot(fact.cut)
plot(diamonds$cut)
plot(diamonds$cut,
ylab = "Valores",
xlab = "Tipo de diamante",
main = "Corte del diamante",
col = topo.colors(length(unique(diamonds$cut)))
)
plot(diamonds$cut,
ylab = "Valores",
xlab = "Tipo de diamante",
main = "Corte del diamante",
col = topo.colors(length(diamonds$cut))
)
plot(diamonds$cut,
ylab = "Valores",
xlab = "Tipo de diamante",
main = "Corte del diamante",
col = topo.colors(length(unique(diamonds$cut)))
)
ggplot(diamonds) +
geom_histogram(mapping = aes(precio, fill=cut), color="lightblue", alpha=0.6)
ggplot(diamonds) +
geom_histogram(mapping = aes(price, fill=cut), color="lightblue", alpha=0.6)
ggplot(diamonds) +
geom_histogram(mapping = aes(price, fill=cut))
ggplot(diamonds) + geom_boxplot(mapping = aes(price, fill=cut)) + facet_wrap(clarity)
ggplot(diamonds) + geom_boxplot(mapping = aes(price, fill=cut)) + facet_wrap(~clarity)
par(mfrow = c(2,2))
#Fila 1, columna 1
plot(diamonds$x, diamonds$depth)
par(mfrow = c(2,2))
#Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "Depth",
main = "X~Depth"
col ="lightgreen"
par(mfrow = c(2,2))
#Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "Depth",
main = "X~Depth",
col ="lightgreen"
)
par(mfrow = c(2,2))
#Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "Depth",
main = "X~Depth",
col ="lightgreen"
)
#Fila 2, columna 1
plot(diamonds$y, diamonds$depth,
xlab = "Variable Y",
ylab = "Depth",
main = "Y~Depth",
col ="lightred"
)
par(mfrow = c(2,2))
#Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "Depth",
main = "X~Depth",
col ="lightgreen"
)
#Fila 2, columna 1
plot(diamonds$y, diamonds$depth,
xlab = "Variable Y",
ylab = "Depth",
main = "Y~Depth",
col ="darkred"
)
#Fila 1, columna 2
plot(diamonds$z, diamonds$depth,
xlab = "Variable Z",
ylab = "Depth",
main = "Z~Depth",
col ="lightblue"
)
#Fila 2, columna 2
plot(diamonds$carat, diamonds$depth,
xlab = "Variable Carat",
ylab = "Depth",
main = "Carat~Depth",
col ="tan1"
)
library(ggplot2)
library(plotly)
head(diamonds)
str(diamonds)
summary(diamonds)
plot(diamonds$cut,
ylab = "Valores",
xlab = "Tipo de diamante",
main = "Corte del diamante",
col = topo.colors(length(unique(diamonds$cut)))
)
ggplot(diamonds) +
geom_histogram(mapping = aes(price, fill=cut))
ggplot(diamonds) + geom_boxplot(mapping = aes(price, fill=cut)) + facet_wrap(~clarity)
par(mfrow = c(2,2))
#Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "Depth",
main = "X~Depth",
col ="lightgreen"
)
#Fila 2, columna 1
plot(diamonds$y, diamonds$depth,
xlab = "Variable Y",
ylab = "Depth",
main = "Y~Depth",
col ="darkred"
)
#Fila 1, columna 2
plot(diamonds$z, diamonds$depth,
xlab = "Variable Z",
ylab = "Depth",
main = "Z~Depth",
col ="lightblue"
)
#Fila 2, columna 2
plot(diamonds$carat, diamonds$depth,
xlab = "Variable Quilates",
ylab = "Depth",
main = "Quilates~Depth",
col ="tan1"
)
library(ggplot2)
library(plotly)
head(diamonds)
str(diamonds)
summary(diamonds)
# Hacer un gráfico de barras con la cantidad de diamantes que hay para cada valor de la variable cut.
plot(diamonds$cut,
main = "Corte del diamante",
xlab = "Tipo de diamante",
ylab = "Valores",
las = 1,
col = topo.colors(length(unique(diamonds$cut))))
# Realiza un histograma del precio que muestre la frecuencia acumulada de la variable cut.
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price, fill = cut))
# Realiza un diagrama boxplot sobre el precio en función de la variable cut, obtén un diagrama diferente por cada variable clarity.
ggplot(diamonds) +
geom_boxplot(mapping = aes(price, fill = cut)) + facet_wrap(~clarity)
# Realiza una gráfica múltiple de 4 visualizaciones, en donde para cada visualización se realice un diagrama de dispersión en el que se tomen los valores: x, y, z y carat contra depth.
par(mfcol=c(2,2))
# Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "depth",
main = "X ~ depth",
col = 'darkgreen')
# Fila 2, columna 1
plot(diamonds$y, diamonds$depth,
xlab = "Variable Y",
ylab = "depth",
main = "Y ~ depth",
col = 'darkred')
# Fila 1, columna 2
plot(diamonds$z, diamonds$depth,
xlab = "Variable Z",
ylab = "depth",
main = "Z ~ depth",
col = 'blue')
# Fila 2, columna 2
plot(diamonds$carat, diamonds$depth,
xlab = "Variable Quilates",
ylab = "depth",
main = "Quilates ~ depth",
col = 'purple')
# Realiza un diagrama de dispersión con recta de ajuste del price sobre carat.
ggplot(diamonds) +
geom_point(mapping = aes(price, carat)) + geom_smooth(aes(price, carat), method = lm)
# Toma una muestra de 100 observaiones y, realiza un diagrama de barras de la variable cut contra price, en función de clarity.
library(dplyr)
fig.bar <- plot_ly (
data = sample_n(diamonds, 100),
x = ~cut,
y = ~price,
type = "bar",
color = ~clarity
)
fig.bar
# Realiza un diagram de sectores de la variable cut con los valores de carat.
fig <- plot_ly(
data = diamonds,
labels = ~cut,
values = ~carat,
type = 'pie'
)
fig
ggplot(diamonds) +
geom_point(mapping = aes(price, carat)) + geom_smooth(aes(price,carat))
?method
ggplot(diamonds) +
geom_point(mapping = aes(price, carat)) + geom_smooth(aes(price,carat), method = lm)
ggplot(diamonds) +
geom_point(mapping = aes(price, carat, color=cut)) + geom_smooth(aes(price,carat), method = lm)
ggplot(diamonds) +
geom_point(mapping = aes(price, carat, color="lightgreen")) + geom_smooth(aes(price,carat), method = lm)
ggplot(diamonds) +
geom_point(mapping = aes(price, carat), color="lightgreen") + geom_smooth(aes(price,carat), method = lm)
ggplot(diamonds) +
geom_point(mapping = aes(price, sample(diamonds$carat, 100), color="lightgreen") + geom_smooth(aes(price,carat), method = lm)
ggplot(diamonds) +
geom_point(mapping = aes(price, sample(diamonds$carat, 100, replace = F), color="lightgreen") + geom_smooth(aes(price,carat), method = lm)
ggplot(diamonds) +
geom_point(mapping = aes(price, sample(diamonds$carat, 100, replace = F)), color="lightgreen") + geom_smooth(aes(price,carat), method = lm)
ggplot(diamonds) +
geom_point(mapping = aes(price, carat), color="lightgreen") + geom_smooth(aes(price,carat), method = lm)
library(dplyr)
fig.bar <- plot_ly(
data = sample_n(diamonds,100),
x = cut,
y = price,
type = "bar",
color = clarity
)
fig.bar <- plot_ly(
data = sample_n(diamonds,100),
x = ~cut,
y = ~price,
type = "bar",
color = ~clarity
)
library(dplyr)
fig.bar <- plot_ly(
data = sample_n(diamonds,100),
x = ~cut,
y = ~price,
type = "bar",
color = ~clarity
)
fig.bar
fig.sec <- plot_ly(
data = diamonds,
labels = ~cut,
values = ~carat,
type = "pie"
)
fig.sec <- plot_ly(
data = diamonds,
labels = ~cut,
values = ~carat,
type = "pie"
)
fig.sec <- plot_ly(
data = diamonds,
labels = ~cut,
values = ~carat,
type = "pie"
)
fig.sec
library(ggplot2)
library(plotly)
head(diamonds)
str(diamonds)
summary(diamonds)
plot(diamonds$cut,
ylab = "Valores",
xlab = "Tipo de diamante",
main = "Corte del diamante",
col = topo.colors(length(unique(diamonds$cut)))
)
ggplot(diamonds) +
geom_histogram(mapping = aes(price, fill=cut))
ggplot(diamonds) + geom_boxplot(mapping = aes(price, fill=cut)) + facet_wrap(~clarity)
par(mfrow = c(2,2))
#Fila 1, columna 1
plot(diamonds$x, diamonds$depth,
xlab = "Variable X",
ylab = "Depth",
main = "X~Depth",
col ="lightgreen"
)
#Fila 2, columna 1
plot(diamonds$y, diamonds$depth,
xlab = "Variable Y",
ylab = "Depth",
main = "Y~Depth",
col ="darkred"
)
#Fila 1, columna 2
plot(diamonds$z, diamonds$depth,
xlab = "Variable Z",
ylab = "Depth",
main = "Z~Depth",
col ="lightblue"
)
#Fila 2, columna 2
plot(diamonds$carat, diamonds$depth,
xlab = "Variable Quilates",
ylab = "Depth",
main = "Quilates~Depth",
col ="tan1"
)
ggplot(diamonds) +
geom_point(mapping = aes(price, carat), color="lightgreen") + geom_smooth(aes(price,carat), method = lm)
library(dplyr)
fig.bar <- plot_ly(
data = sample_n(diamonds,100),
x = ~cut,
y = ~price,
type = "bar",
color = ~clarity
)
fig.bar
fig.sec <- plot_ly(
data = diamonds,
labels = ~cut,
values = ~carat,
type = "pie"
)
fig.sec
